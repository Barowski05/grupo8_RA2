# cache_core_simplificado.py
import time
from abc import ABC, abstractmethod

class CacheStats:
    def __init__(self):
        self.hits = 0
        self.misses = 0
        self.requests = 0
        self.total_ms = 0.0

    @property
    def avg_ms(self):
        return self.total_ms / self.requests if self.requests else 0.0


class CacheBase(ABC):
    """Base simples para caches (FIFO, LRU, etc.)"""

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.data = {}
        self.stats_data = CacheStats()

    @abstractmethod
    def get(self, text_id: int, loader) -> str:
        """Busca um texto no cache, chamando o loader em caso de miss."""
        pass

    def put(self, text_id: int, content: str):
        self.data[text_id] = content

    def stats(self):
        return self.stats_data

    def reset(self):
        self.data.clear()
        self.stats_data = CacheStats()


class DummyCache(CacheBase):
    """Cache de teste simples (sem política de substituição)."""

    def get(self, text_id: int, loader) -> str:
        start = time.perf_counter()

        if text_id in self.data:  # HIT
            self.stats_data.hits += 1
            content = self.data[text_id]
        else:                     # MISS
            self.stats_data.misses += 1
            content = loader(text_id)
            self.data[text_id] = content

        elapsed = (time.perf_counter() - start) * 1000
        self.stats_data.requests += 1
        self.stats_data.total_ms += elapsed

        return content


# Teste rápido
if __name__ == "__main__":
    def slow_loader(i):
        time.sleep(0.05)
        return f"[TEXTO {i}] lorem ipsum"

    cache = DummyCache(capacity=3)
    for i in [1, 2, 1, 3, 2, 4, 1]:
        cache.get(i, slow_loader)
        st = cache.stats()
        print(f"req {i} | hits={st.hits} misses={st.misses} avg_ms={st.avg_ms:.2f}")
